package com.ibm.garage.warehouse.controllers;


import com.ibm.garage.warehouse.models.Availability;
import com.ibm.garage.warehouse.repositories.AvailabilityRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/availability") // This means URL's start with /availability (after Application path)
public class AvailabilityController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private AvailabilityRepository availabilityRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewAvailability (
      @RequestParam Integer id,
      @RequestParam String facility,
      @RequestParam String country,
      @RequestParam String region,
      @RequestParam int quantity,
      @RequestParam int maxQuantity,
      @RequestParam Double unitPrice) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    if (quantity <= maxQuantity) {
      Availability n = new Availability();
      n.setId(id);
      n.setFacility(facility);
      n.setCountry(country);
      n.setRegion(region);
      n.setQuantity(quantity);
      n.setMaxQuantity(maxQuantity);
      n.setUnitPrice(unitPrice);
      n.setAvailable(true);
      availabilityRepository.save(n);
      return "Saved";
    } else {
        return "Not Saved! quantity greater than maxQuantity";
    }
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<Availability> getAllAvailability() {
    // This returns a JSON or XML with the users
    return availabilityRepository.findAll();
  }
}